{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","onClick","aria-label","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuidv4","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8409bcb3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdEdit, MdDelete} from 'react-icons/md'\r\n\r\nconst ExpenseItem = ({\r\n  expense,\r\n  handleEdit,\r\n  handleDelete\r\n}) => {\r\n  const { id, charge, amount } = expense;\r\n  return (\r\n    <li className='item'>\r\n      <div className=\"info\">\r\n        <span className=\"expense\">\r\n          {charge}\r\n        </span>\r\n        <span className='amount'>\r\n          $ {amount}\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() => handleEdit(id)}\r\n          className=\"edit-btn\"\r\n          aria-label='edit button'\r\n        >\r\n          <MdEdit />\r\n        </button>\r\n        <button\r\n          onClick={() => handleDelete(id)}\r\n          className=\"clear-btn\" aria-label='delete button'>\r\n          <MdDelete />\r\n        </button>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ExpenseItem\r\n","import React from 'react'\r\nimport Item from './ExpenseItem'\r\nimport {MdDelete} from 'react-icons/md'\r\n\r\nconst ExpenseList = ({\r\n  expenses,\r\n  handleEdit,\r\n  handleDelete,\r\n  clearItems\r\n}) => {\r\n  return (\r\n    <>\r\n      <ul className='list'>\r\n        {expenses.map((expense) => {\r\n          return (\r\n            <Item\r\n              key={expense.id}\r\n              expense={expense}\r\n              handleDelete={handleDelete}\r\n              handleEdit={handleEdit}\r\n            />\r\n          ); \r\n        })}\r\n      </ul>\r\n      {expenses.length > 0 && (\r\n        <button \r\n        className='btn' \r\n          onClick={clearItems}>\r\n        clear expenses\r\n        <MdDelete className='btn-icon' />\r\n        </button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ExpenseList","import React from 'react'\r\nimport {MdSend} from 'react-icons/md'\r\n\r\nconst ExpenseForm = ({\r\n  charge,\r\n  amount,\r\n  handleCharge,\r\n  handleAmount,\r\n  handleSubmit,\r\n  edit\r\n}) => {\r\n  return (\r\n  <form onSubmit={handleSubmit}>\r\n    <div className='form-center'>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"charge\">charge</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id='charge'\r\n            name='charge' \r\n            placeholder='e.g rent'\r\n            value={charge}\r\n            onChange={handleCharge}\r\n          />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"amount\">amount</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id='amount'\r\n            name='amount' \r\n            placeholder='e.g 100'\r\n            value={amount}\r\n            onChange={handleAmount}\r\n          />\r\n        </div>\r\n      </div> \r\n      <button type='submit' className='btn'>\r\n        {edit ? 'edit' : 'send'}\r\n        <MdSend className='btn-icon' />\r\n      </button>\r\n  </form>\r\n  )\r\n};\r\n\r\nexport default ExpenseForm","import React from 'react'\r\n\r\nconst Alert = ({type, text}) => {\r\n  return (\r\n    <div className={`alert  alert-${type}`}>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseForm from './components/ExpenseForm';\nimport Alert from './components/Alert';\nimport { v4 as uuidv4 } from 'uuid';\n\n// useEffect let's you perform side effects\n// runs after every render\n// first parameter - callback function (runs after render)\n// second parameter - array - for letting react know when to\n// run useEffect.\n// react re-renders when state has changed or props\n\n// localStorage.getItem('item name');\n// localStorage.setItem('item name');\n\n// const initialExpenses = [\n//   { id: uuidv4(), charge: 'rent', amount: 1600 },\n//   { id: uuidv4(), charge: 'car payment', amount: 400 },\n//   { id: uuidv4(), charge: 'credit card bill', amount: 1200 }\n// ];\n\nconst initialExpenses = localStorage.getItem(\"expenses\") \n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\n\n\nfunction App() {\n  // ******** state values ********\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n  // single expense\n  const [charge, setCharge] = useState('');\n  // single amount\n  const [amount, setAmount] = useState('');\n  // alert\n  const [alert, setAlert] = useState({ show: false });\n  // edit\n  const [edit, setEdit] = useState(false);\n  // edit item\n  const [id, setId] = useState(0);\n\n  // ******** useEffect ********  \n  useEffect(() => {\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  },[expenses]);\n  // ******** functionality ********\n  // handle charge\n  const handleCharge = e => {\n    setCharge(e.target.value);\n  }\n  // handle amount\n  const handleAmount = e => {  \n    setAmount(e.target.value);\n  }\n  // handle alert\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({show:false})\n    }, 3000)\n  }\n  // handle Submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (charge !== '' && amount > 0) {\n      if (edit) {\n        let tempExpenses = expenses.map(item => {\n          return item.id === id ? { ...item, charge, amount }\n            : item\n        });\n        setExpenses(tempExpenses);\n        setEdit(false);\n        handleAlert({ type: 'success', text: 'item edited' })        \n      } else {\n        const singleExpense = {\n          id: uuidv4(),\n          charge,\n          amount,\n        }\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({ type: 'success', text: 'item added' })        \n      }\n      setCharge('');\n      setAmount('');\n      \n    } else {\n      // handle alert called\n      handleAlert({\n        type: 'danger', text: `charge can't be empty\n        value and amount value has to be bigger than zero`})\n    }\n  };\n\n  // clear all items\n  const clearItems = () => {\n    setExpenses([]);  \n    handleAlert({ type: 'danger', text: 'all items deleted' });\n  }\n\n  // handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({ type: 'danger', text: 'item deleted' });\n  }\n\n  // handle edit\n  const handleEdit = id => {\n    let expense = expenses.find(item => item.id === id)\n    let { charge, amount } = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  }\n\n  return (\n    <>\n      {alert.show && <Alert\n        type={alert.type}\n        text={alert.text} \n        />}\n      <Alert  />\n      <h1>budget calculator</h1>\n      <main className='App'> \n        <ExpenseForm\n          charge={charge}\n          amount={amount}\n          handleAmount={handleAmount}\n          handleCharge={handleCharge} \n          handleSubmit={handleSubmit}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        total spending :{' '}\n        <span className='total'>\n          $ {expenses.reduce((acc, curr) => {\n            return (acc += parseInt(curr.amount));\n          },0)}\n        </span>\n      </h1>\n      <h4>React useState, useEffect</h4>\n      <h4>local storage</h4>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}